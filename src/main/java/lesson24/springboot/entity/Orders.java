package lesson24.springboot.entity;
// Generated Feb 2, 2019 5:38:52 PM by Hibernate Tools 5.2.10.Final

import java.math.BigDecimal;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Orders generated by hbm2java
 */
@Entity
@Table(name = "ORDERS", schema = "MA_STUDENT")
public class Orders implements java.io.Serializable {

	private BigDecimal orderNum;
	@JsonIgnore
	private Customers customers;
	@JsonIgnore
	private Products products;
	@JsonIgnore
	private Salesreps salesreps;
	private Date orderDate;
	private String mfr;
	private BigDecimal qty;
	private BigDecimal amount;

	public Orders() {
	}

	public Orders(BigDecimal orderNum) {
		this.orderNum = orderNum;
	}

	public Orders(BigDecimal orderNum, Customers customers, Products products, Salesreps salesreps, Date orderDate,
			String mfr, BigDecimal qty, BigDecimal amount) {
		this.orderNum = orderNum;
		this.customers = customers;
		this.products = products;
		this.salesreps = salesreps;
		this.orderDate = orderDate;
		this.mfr = mfr;
		this.qty = qty;
		this.amount = amount;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY, generator = "order_gen")
	@SequenceGenerator(name = "order_gen", sequenceName = "ORDER_SEQ", allocationSize = 1)
	// CREATE SEQUENCE ORDER_SEQ
	// MINVALUE 5555555555
	// MAXVALUE 9999999999
	// START WITH 5555555556
	// INCREMENT BY 1;
	@Column(name = "ORDER_NUM", unique = true, nullable = false, precision = 22, scale = 0)
	public BigDecimal getOrderNum() {
		return this.orderNum;
	}

	public void setOrderNum(BigDecimal orderNum) {
		this.orderNum = orderNum;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CUST")
	public Customers getCustomers() {
		return this.customers;
	}

	public void setCustomers(Customers customers) {
		this.customers = customers;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PRODUCT")
	public Products getProducts() {
		return this.products;
	}

	public void setProducts(Products products) {
		this.products = products;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "REP")
	public Salesreps getSalesreps() {
		return this.salesreps;
	}

	public void setSalesreps(Salesreps salesreps) {
		this.salesreps = salesreps;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ORDER_DATE", length = 7)
	public Date getOrderDate() {
		return this.orderDate;
	}

	public void setOrderDate(Date orderDate) {
		this.orderDate = orderDate;
	}

	@Column(name = "MFR", length = 3)
	public String getMfr() {
		return this.mfr;
	}

	public void setMfr(String mfr) {
		this.mfr = mfr;
	}

	@Column(name = "QTY", precision = 22, scale = 0)
	public BigDecimal getQty() {
		return this.qty;
	}

	public void setQty(BigDecimal qty) {
		this.qty = qty;
	}

	@Column(name = "AMOUNT", precision = 22, scale = 0)
	public BigDecimal getAmount() {
		return this.amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
		buffer.append("orderNum").append("='").append(getOrderNum()).append("' ");
		buffer.append("orderDate").append("='").append(getOrderDate()).append("' ");
		buffer.append("mfr").append("='").append(getMfr()).append("' ");
		buffer.append("qty").append("='").append(getQty()).append("' ");
		buffer.append("amount").append("='").append(getAmount()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((amount == null) ? 0 : amount.hashCode());
		result = prime * result + ((customers == null) ? 0 : customers.hashCode());
		result = prime * result + ((mfr == null) ? 0 : mfr.hashCode());
		result = prime * result + ((orderDate == null) ? 0 : orderDate.hashCode());
		result = prime * result + ((orderNum == null) ? 0 : orderNum.hashCode());
		result = prime * result + ((products == null) ? 0 : products.hashCode());
		result = prime * result + ((qty == null) ? 0 : qty.hashCode());
		result = prime * result + ((salesreps == null) ? 0 : salesreps.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Orders other = (Orders) obj;
		if (amount == null) {
			if (other.amount != null)
				return false;
		} else if (!amount.equals(other.amount))
			return false;
		if (customers == null) {
			if (other.customers != null)
				return false;
		} else if (!customers.equals(other.customers))
			return false;
		if (mfr == null) {
			if (other.mfr != null)
				return false;
		} else if (!mfr.equals(other.mfr))
			return false;
		if (orderDate == null) {
			if (other.orderDate != null)
				return false;
		} else if (!orderDate.equals(other.orderDate))
			return false;
		if (orderNum == null) {
			if (other.orderNum != null)
				return false;
		} else if (!orderNum.equals(other.orderNum))
			return false;
		if (products == null) {
			if (other.products != null)
				return false;
		} else if (!products.equals(other.products))
			return false;
		if (qty == null) {
			if (other.qty != null)
				return false;
		} else if (!qty.equals(other.qty))
			return false;
		if (salesreps == null) {
			if (other.salesreps != null)
				return false;
		} else if (!salesreps.equals(other.salesreps))
			return false;
		return true;
	}

}
